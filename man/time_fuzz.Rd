% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/time_fuzz.R
\name{time_fuzz}
\alias{time_fuzz}
\title{time_fuzz}
\value{
an \link{time_fuzz} object
}
\description{
time_fuzz
}
\details{
\strong{Methods}
\describe{
\item{\code{freeze(...)}}{
Freeze time
}
}
}
\examples{
\dontrun{
x <- time_fuzz$new()
x
x$date

x <- time_fuzz$new()
x
x$freeze
x$freeze("2019-01-29", {
  5 + 5
})

x$scale
x$scale({
  5 + 5
})

library(timefuzz)
library(clock)
library(testthat)
# clock::clock_mock()
clock:::clock_opts$mock
(cl <- clock())
book_due <- function(due_date = "2020-08-25") {
  as.POSIXct(clock::clock()$date()) > as.POSIXct(due_date)
}
expect_false(book_due()) # FALSE
x <- time_fuzz$new()
x
x$freeze(Sys.Date() + 60, {
  # clock::clock_mock()
  # cat(clock:::clock_opts$mock, sep = "\n")
  # cat(as.character(clock::clock()$date()), sep = "\n")
  # cat(clock:::clock_opts$mock, sep = "\n")
  expect_true(book_due())
})

# no block passed
clock_mock()
clock()$now()
Sys.time()
x <- time_fuzz$new()
## set to today + 435 days
x$freeze(Sys.Date() + 435)
clock:::clock_opts$mock
clock()$now()
x$unfreeze()
clock:::clock_opts$mock
clock()$now()

# time travel
library(clock)
x <- time_fuzz$new()
x$travel(Sys.Date() - 1000)
Sys.Date()
sys_date()
x$unfreeze()
}
}
